services:
  database:
    container_name: database
    build:
      context: database/
      args:
        DATABASE_VERSION: ${DATABASE_VERSION}
    volumes:
      - oracle:/opt/oracle/oradata
    ports:
      - 1521:1521
    environment:
      - ORACLE_PWD=${ORACLE_PWD:-}
      - ORACLE_SID=${ORACLE_SID:-}
      - ORACLE_CHARACTERSET=${ORACLE_CHARACTERSET:-}
    networks:
      - net
    restart: always

  elasticsearch:
    container_name: elasticsearch
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION:-}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
    environment:
      ES_JAVA_OPTS: -Xms1g -Xmx1g
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
    networks:
      - net
    restart: always

  kibana:
    container_name: kibana
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION:-}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - net
    depends_on:
      - elasticsearch
    restart: always

  logstash:
    container_name: logstash
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5000:5000
    #      - 50000:50000/tcp
    #      - 50000:50000/udp
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - net
    depends_on:
      - elasticsearch
    restart: always

  zookeeper:
    container_name: zookeeper
    build:
      context: zookeeper/
      args:
        ZOOKEEPER_VERSION: ${ZOOKEEPER_VERSION}
    volumes:
      - ./zookeeper/config/data/:/data
      - ./zookeeper/config/data/datalog:/datalog
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - net
    restart: always

  kafka:
    container_name: kafka
    build:
      context: kafka/
      args:
        KAFKA_VERSION: ${KAFKA_VERSION}
    volumes:
      - ./kafka/config/data:/var/lib/kafka/data
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_LISTENER=PLAINTEXT://kafka:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_LISTENER=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - net
    restart: always

  redis:
    container_name: redis
    build:
      context: redis/
      args:
        REDIS_VERSION: ${REDIS_VERSION}
    volumes:
      - redis:/data
    ports:
      - 6379:6379
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - net
    restart: always

  config-service:
    container_name: config-service
    build:
      context: config/
      dockerfile: Dockerfile/
    ports:
      - 2302:2302
#    volumes:
#      - config:/usr/share/app/data
    networks:
      - net
#    depends_on:
#      - database
    restart: unless-stopped

  registry-service:
    container_name: registry-service
    build:
      context: registry/
      dockerfile: Dockerfile/
    ports:
      - 8761:8761
#    volumes:
#      - registry:/usr/share/app/data
    networks:
      - net
#    depends_on:
#      - database
    restart: unless-stopped

  security-service:
    container_name: security-service
    build:
      context: security/
      dockerfile: Dockerfile/
    ports:
      - 8081:8081
#    volumes:
#      - security:/usr/share/app/data
    networks:
      - net
#    depends_on:
#      - database
    restart: unless-stopped

  gateway-service:
    container_name: gateway-service
    build:
      context: gateway/
      dockerfile: Dockerfile/
    ports:
      - 8888:8888
#    volumes:
#      - gateway:/usr/share/app/data
    networks:
      - net
    #    depends_on:
    #      - database
    restart: unless-stopped

  socketio-service:
    container_name: socketio-service
    build:
      context: socketio/
      dockerfile: Dockerfile/
    ports:
      - 8082:8082
#    volumes:
#      - socketio:/usr/share/app/data
    networks:
      - net
    #    depends_on:
    #      - database
    restart: unless-stopped

  system-service:
    container_name: system-service
    build:
      context: system/
      dockerfile: Dockerfile/
    ports:
      - 8083:8083
#    volumes:
#      - system:/usr/share/app/data
    networks:
      - net
    #    depends_on:
    #      - database
    restart: unless-stopped

  categories-service:
    container_name: categories-service
    build:
      context: categories/
      dockerfile: Dockerfile/
    ports:
      - 8084:8084
#    volumes:
#      - categories:/usr/share/app/data
    networks:
      - net
    #    depends_on:
    #      - database
    restart: unless-stopped

volumes:
  oracle:
    driver: local
  elasticsearch:
    driver: local
  redis:
    driver: local
  config:
    driver: local
#  registry:
#    driver: local
#  security:
#    driver: local
#  gateway:
#    driver: local
#  socketio:
#    driver: local
#  system:
#    driver: local
#  categories:
#    driver: local

networks:
  net:
    driver: bridge